// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ProductList /> renders 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ProductTable
    products={Array []}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <TableHeader>
          <TableRow>
            <ForwardRef>
              <strong>
                Nome
              </strong>
            </ForwardRef>
            <ForwardRef>
              <strong>
                Preço
              </strong>
            </ForwardRef>
          </TableRow>
        </TableHeader>,
        <TableBody>
          <ProductList
            products={Array []}
          />
        </TableBody>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <TableRow>
            <ForwardRef>
              <strong>
                Nome
              </strong>
            </ForwardRef>
            <ForwardRef>
              <strong>
                Preço
              </strong>
            </ForwardRef>
          </TableRow>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <ForwardRef>
                <strong>
                  Nome
                </strong>
              </ForwardRef>,
              <ForwardRef>
                <strong>
                  Preço
                </strong>
              </ForwardRef>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <strong>
                  Nome
                </strong>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Nome",
                },
                "ref": null,
                "rendered": "Nome",
                "type": "strong",
              },
              "type": Object {
                "description": "A cell of data in a table.",
                "intrinsicElement": "td",
                "name": "TableCell",
                "properties": Array [
                  Object {
                    "defaultValue": false,
                    "description": "Whether default styling context should be removed.",
                    "format": "boolean",
                    "name": "plain",
                  },
                  Object {
                    "description": "For header cells, what scope the header is for.
        Typically, the cells in a TableHeader have 'col' scope and
        the primary cell in each row in the TableBody has 'row' scope.",
                    "format": "col
row",
                    "name": "scope",
                  },
                  Object {
                    "description": "What size the cell should be. Typically, this is not needed
      unless you are trying to align multiple tables.",
                    "format": "xxsmall
xsmall
small
medium
large
xlarge
1/2
1/3
2/3
1/4
2/4
3/4
string",
                    "name": "size",
                  },
                  Object {
                    "description": "How to align the contents vertically.",
                    "format": "top
middle
bottom",
                    "name": "verticalAlign",
                  },
                ],
                "usage": "import { TableCell } from 'grommet';
<TableCell />",
              },
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <strong>
                  Preço
                </strong>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Preço",
                },
                "ref": null,
                "rendered": "Preço",
                "type": "strong",
              },
              "type": Object {
                "description": "A cell of data in a table.",
                "intrinsicElement": "td",
                "name": "TableCell",
                "properties": Array [
                  Object {
                    "defaultValue": false,
                    "description": "Whether default styling context should be removed.",
                    "format": "boolean",
                    "name": "plain",
                  },
                  Object {
                    "description": "For header cells, what scope the header is for.
        Typically, the cells in a TableHeader have 'col' scope and
        the primary cell in each row in the TableBody has 'row' scope.",
                    "format": "col
row",
                    "name": "scope",
                  },
                  Object {
                    "description": "What size the cell should be. Typically, this is not needed
      unless you are trying to align multiple tables.",
                    "format": "xxsmall
xsmall
small
medium
large
xlarge
1/2
1/3
2/3
1/4
2/4
3/4
string",
                    "name": "size",
                  },
                  Object {
                    "description": "How to align the contents vertically.",
                    "format": "top
middle
bottom",
                    "name": "verticalAlign",
                  },
                ],
                "usage": "import { TableCell } from 'grommet';
<TableCell />",
              },
            },
          ],
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <ProductList
            products={Array []}
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "products": Array [],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <TableHeader>
            <TableRow>
              <ForwardRef>
                <strong>
                  Nome
                </strong>
              </ForwardRef>
              <ForwardRef>
                <strong>
                  Preço
                </strong>
              </ForwardRef>
            </TableRow>
          </TableHeader>,
          <TableBody>
            <ProductList
              products={Array []}
            />
          </TableBody>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <TableRow>
              <ForwardRef>
                <strong>
                  Nome
                </strong>
              </ForwardRef>
              <ForwardRef>
                <strong>
                  Preço
                </strong>
              </ForwardRef>
            </TableRow>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <ForwardRef>
                  <strong>
                    Nome
                  </strong>
                </ForwardRef>,
                <ForwardRef>
                  <strong>
                    Preço
                  </strong>
                </ForwardRef>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": <strong>
                    Nome
                  </strong>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Nome",
                  },
                  "ref": null,
                  "rendered": "Nome",
                  "type": "strong",
                },
                "type": Object {
                  "description": "A cell of data in a table.",
                  "intrinsicElement": "td",
                  "name": "TableCell",
                  "properties": Array [
                    Object {
                      "defaultValue": false,
                      "description": "Whether default styling context should be removed.",
                      "format": "boolean",
                      "name": "plain",
                    },
                    Object {
                      "description": "For header cells, what scope the header is for.
        Typically, the cells in a TableHeader have 'col' scope and
        the primary cell in each row in the TableBody has 'row' scope.",
                      "format": "col
row",
                      "name": "scope",
                    },
                    Object {
                      "description": "What size the cell should be. Typically, this is not needed
      unless you are trying to align multiple tables.",
                      "format": "xxsmall
xsmall
small
medium
large
xlarge
1/2
1/3
2/3
1/4
2/4
3/4
string",
                      "name": "size",
                    },
                    Object {
                      "description": "How to align the contents vertically.",
                      "format": "top
middle
bottom",
                      "name": "verticalAlign",
                    },
                  ],
                  "usage": "import { TableCell } from 'grommet';
<TableCell />",
                },
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": <strong>
                    Preço
                  </strong>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Preço",
                  },
                  "ref": null,
                  "rendered": "Preço",
                  "type": "strong",
                },
                "type": Object {
                  "description": "A cell of data in a table.",
                  "intrinsicElement": "td",
                  "name": "TableCell",
                  "properties": Array [
                    Object {
                      "defaultValue": false,
                      "description": "Whether default styling context should be removed.",
                      "format": "boolean",
                      "name": "plain",
                    },
                    Object {
                      "description": "For header cells, what scope the header is for.
        Typically, the cells in a TableHeader have 'col' scope and
        the primary cell in each row in the TableBody has 'row' scope.",
                      "format": "col
row",
                      "name": "scope",
                    },
                    Object {
                      "description": "What size the cell should be. Typically, this is not needed
      unless you are trying to align multiple tables.",
                      "format": "xxsmall
xsmall
small
medium
large
xlarge
1/2
1/3
2/3
1/4
2/4
3/4
string",
                      "name": "size",
                    },
                    Object {
                      "description": "How to align the contents vertically.",
                      "format": "top
middle
bottom",
                      "name": "verticalAlign",
                    },
                  ],
                  "usage": "import { TableCell } from 'grommet';
<TableCell />",
                },
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <ProductList
              products={Array []}
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "products": Array [],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
